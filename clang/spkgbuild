# description	: Collection of modular and reusable compiler and toolchain technologies
# depends	: llvm

name=clang
version=16.0.6
release=1
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-$version.src.tar.xz
	https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/cmake-${version}.src.tar.xz"
#	https://www.linuxfromscratch.org/patches/blfs/svn/clang-${version}-enable_default_ssp-1.patch"                                                                
noextract="cmake-${version}.src.tar.xz"


build() {
	if scratch isinstalled xf86-video-amdgpu || scratch isinstalled xf86-video-ati; then
		TARGETS="AMDGPU;X86"
	else
		TARGETS="X86"
	fi

	cd $name-$version.src

	# The upstream expects it to be extracted at the same level as the llvm tarball, and 
	# the extracted directory renamed to cmake
	tar -xf $SRC/cmake-${version}.src.tar.xz
	sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-${version}.src@" -i CMakeLists.txt

	# Enable SSP by default
#	patch -Np2 -i $SRC/clang-${version}-enable_default_ssp-1.patch

	cmake -B build -G Ninja \
	    -D CMAKE_INSTALL_PREFIX=/usr \
	    -D CMAKE_INSTALL_LIBEXECDIR=/usr/lib/clang \
	    -D CMAKE_BUILD_TYPE=Release \
	    -D CMAKE_C_FLAGS_RELEASE="$CFLAGS" \
	    -D CMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
	    -D LLVM_ENABLE_RTTI=ON \
	    -D LLVM_ENABLE_EH=ON \
	    -D CLANG_BUILD_EXAMPLES=OFF \
	    -D CLANG_INCLUDE_DOCS=OFF \
	    -D CLANG_INCLUDE_TESTS=OFF \
	    -D LIBCLANG_BUILD_STATIC=ON \
	    -D CLANG_BUILT_STANDALONE=ON \
	    -D LLVM_TARGETS_TO_BUILD="$TARGETS" \
	    -Wno-dev
  cmake --build build
  DESTDIR=$PKG cmake --install build
}
