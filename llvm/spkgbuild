# description	: Collection of modular and reusable compiler and toolchain technologies
# depends	: cmake libffi python3 ninja libxml2

name=llvm
version=17.0.5
release=1
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-$version.src.tar.xz
	https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/cmake-$version.src.tar.xz
	https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/cmake-${version}.src.tar.xz
	https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/third-party-${version}.src.tar.xz"
noextract="cmake-${version}.src.tar.xz third-party-${version}.src.tar.xz"

build() {
	if [ "$(hostname)" = "ryzen" ] ; then
		TARGETS="host;AMDGPU"
	else
		TARGETS="host"                                                                                                                                         
	fi

	cd $name-$version.src

	# The upstream expects them extracted at the same level as the llvm tarball, and 
	# the extracted directories renamed to cmake and third-party:
	tar -xf $SRC/cmake-${version}.src.tar.xz
	tar -xf $SRC/third-party-${version}.src.tar.xz
	sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-${version}.src@" -i CMakeLists.txt                 
	sed "/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-${version}.src@" \
		-i cmake/modules/HandleLLVMOptions.cmake

	# Fix Python scripts which use /usr/bin/env python to access the system Python:
	grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

	cmake -B build -G Ninja \
		-D CMAKE_INSTALL_PREFIX=/usr \
		-D CMAKE_BUILD_TYPE=Release \
		-D CMAKE_C_FLAGS_RELEASE="$CFLAGS" \
		-D CMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
		-D LLVM_BINUTILS_INCDIR=/usr/include \
		-D LLVM_BUILD_LLVM_DYLIB=ON \
		-D LLVM_LINK_LLVM_DYLIB=ON \
		-D LLVM_INCLUDE_EXAMPLES=OFF \
		-D LLVM_INCLUDE_TESTS=OFF \
		-D LLVM_ENABLE_FFI=ON \
		-D LLVM_ENABLE_RTTI=ON \
		-D LLVM_ENABLE_OCAMLDOC=OFF \
		-D LLVM_INSTALL_UTILS=ON \
		-D LLVM_ENABLE_LIBCXX=OFF \
		-D LLVM_ENABLE_LLD=$(scratch isinstalled lld && echo ON || echo OFF) \
		-D LLVM_OPTIMIZED_TABLEGEN=ON \
		-D LLVM_INCLUDE_BENCHMARKS=OFF \
		-D LLVM_TARGETS_TO_BUILD="$TARGETS" \
		-Wno-dev
	cmake --build build
	DESTDIR=$PKG cmake --install build
}
